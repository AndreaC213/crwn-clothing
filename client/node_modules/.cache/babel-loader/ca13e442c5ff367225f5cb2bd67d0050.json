{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.groupCollapsed('I am fired');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshop = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n  } catch (error) {} // collectionRef.get().then(snapshot => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  // }).catch(error => dispatch(fetchCollectionsFailure(error.message))); \n\n} // takeEvry is a function for listening the action \n// second parameter is\n// another generator() will response to current \n// takeEvery Listener to trigger more code to run\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/andrea/Desktop/Udemy/React/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","console","groupCollapsed","collectionRef","collection","snapshop","get","collectionsMap","snapshot","error","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,cAAR,CAAuB,YAAvB,CAAN;;AAEA,MAAI;AACF,UAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACG,+BAAD,EAAkCY,QAAlC,CAAjC;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc,CAEf,CATsC,CAWrC;AACA;AACA;AACA;;AACH,C,CAED;AACA;AACA;AACA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMlB,SAAS,CACbO,eAAe,CAACY,uBADH,EAEbX,qBAFa,CAAf;AAID","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure\n} from './shop.actions';\n\nimport ShopActionTypes from './shop.types';\n\nexport function* fetchCollectionsAsync() {\n  yield console.groupCollapsed('I am fired');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshop = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);  \n  } catch (error) {\n\n  }\n \n    // collectionRef.get().then(snapshot => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     dispatch(fetchCollectionsSuccess(collectionsMap));\n    // }).catch(error => dispatch(fetchCollectionsFailure(error.message))); \n}\n\n// takeEvry is a function for listening the action \n// second parameter is\n// another generator() will response to current \n// takeEvery Listener to trigger more code to run\nexport function* fetchCollectionsStart() {\n  yield takeEvery(\n    ShopActionTypes.FETCH_COLLECTIONS_START,\n    fetchCollectionsAsync\n );\n}"]},"metadata":{},"sourceType":"module"}