{"ast":null,"code":"import CartActionTypes from './cart.types';\nimport { addItemToCart, removeItemFromCart } from './cart.utils';\nimport { stat } from 'fs'; // addItem \n// step 1. add new value we want to tarck to current 'cartItems array'\n// adding cart items array to hold the state \n\nconst INITIAL_STATE = {\n  hidden: true,\n  cartItems: []\n}; // addItem\n// step 2. modify 'cartItems array' (property) \n// add the item into array whatever in that payload \n// handle duplication latter\n// addItem\n// step 5. reducer listen the new case 'CartActionTypes.ADD_ITEM'\n// after action come in, \n// update 'cartItems' by using { addItemToCart }\n// addItem\n// step 10. leverage {addItemToCart} to count items\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      return { ...state,\n        hidden: !state.hidden\n      };\n\n    case CartActionTypes.ADD_ITEM:\n      return { ...state,\n        cartItems: addItemToCart(state.cartItems, action.payload)\n      };\n\n    case CartActionTypes.REMOVE_ITEM:\n      return { ...state,\n        cartItems: removeItemFromCart(state.cartItems, action.payload)\n      };\n\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return { ...state,\n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/andrea/Desktop/Udemy/React/crwn-clothing/src/redux/cart/cart.reducer.js"],"names":["CartActionTypes","addItemToCart","removeItemFromCart","stat","INITIAL_STATE","hidden","cartItems","cartReducer","state","action","type","TOGGLE_CART_HIDDEN","ADD_ITEM","payload","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","filter","cartItem","id"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,cAAlD;AACA,SAASC,IAAT,QAAqB,IAArB,C,CAEA;AACA;AACA;;AACA,MAAMC,aAAa,GAAE;AACjBC,EAAAA,MAAM,EAAE,IADS;AAEjBC,EAAAA,SAAS,EAAE;AAFM,CAArB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,eAAe,CAACW,kBAArB;AACE,aAAO,EACH,GAAGH,KADA;AAEHH,QAAAA,MAAM,EAAE,CAACG,KAAK,CAACH;AAFZ,OAAP;;AAIF,SAAKL,eAAe,CAACY,QAArB;AACE,aAAO,EACL,GAAGJ,KADE;AAELF,QAAAA,SAAS,EAAEL,aAAa,CAACO,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB;AAFnB,OAAP;;AAIF,SAAKb,eAAe,CAACc,WAArB;AACE,aAAO,EACL,GAAGN,KADE;AAELF,QAAAA,SAAS,EAAEJ,kBAAkB,CAACM,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB;AAFxB,OAAP;;AAIF,SAAKb,eAAe,CAACe,oBAArB;AACE,aAAO,EACL,GAAGP,KADE;AAELF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBU,MAAhB,CACTC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBT,MAAM,CAACI,OAAP,CAAeK,EADlC;AAFN,OAAP;;AAMF;AACA,aAAOV,KAAP;AAxBF;AA0BD,CA3BD;;AA6BA,eAAeD,WAAf","sourcesContent":["import CartActionTypes from './cart.types';\nimport { addItemToCart, removeItemFromCart } from './cart.utils';\nimport { stat } from 'fs';\n\n// addItem \n// step 1. add new value we want to tarck to current 'cartItems array'\n// adding cart items array to hold the state \nconst INITIAL_STATE ={\n    hidden: true,\n    cartItems: []\n};\n\n// addItem\n// step 2. modify 'cartItems array' (property) \n// add the item into array whatever in that payload \n// handle duplication latter\n// addItem\n// step 5. reducer listen the new case 'CartActionTypes.ADD_ITEM'\n// after action come in, \n// update 'cartItems' by using { addItemToCart }\n// addItem\n// step 10. leverage {addItemToCart} to count items\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      return {\n          ...state,\n          hidden: !state.hidden\n      };\n    case CartActionTypes.ADD_ITEM:\n      return {\n        ...state,\n        cartItems: addItemToCart(state.cartItems, action.payload)\n      };\n    case CartActionTypes.REMOVE_ITEM:\n      return {\n        ...state,\n        cartItems: removeItemFromCart(state.cartItems, action.payload)\n      }\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter(\n          cartItem => cartItem.id !== action.payload.id\n        )\n      };\n    default: \n    return state;\n  }\n};\n\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}