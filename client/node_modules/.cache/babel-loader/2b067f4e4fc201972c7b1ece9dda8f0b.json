{"ast":null,"code":"import { createSelector } from 'reselect';\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector([selectShop], shop => shop.collections); // we want to map the key and get the corresponded object of that key\n\nexport const selectCollectionsForPreview = createSelector([selectCollections], collections => collections ? Object.keys(collections).map(key => collections[key]) : []); // find collection.id matching the url params of \n// the current collection id map\n// Data Normalization by passing as objects not array\n\nexport const selectCollection = collectionUrlParam => createSelector([selectCollections], collections => collections ? collections[collectionUrlParam] : null);\nexport const selectIsCollectionFetching = createSelector([selectShop], shop => shop.isFetching); // ' !!shop.collections ' means if the collections is\n// loaded will return false\n// because is not empty string {}\n\nexport const selectIsCollectionsLoaded = createSelector([selectShop], shop => !!shop.collections);","map":{"version":3,"sources":["/Users/andrea/Desktop/Udemy/React/crwn-clothing/client/src/redux/shop/shop.selectors.js"],"names":["createSelector","selectShop","state","shop","selectCollections","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectIsCollectionFetching","isFetching","selectIsCollectionsLoaded"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC;;AAEA,OAAO,MAAMC,iBAAiB,GAAGJ,cAAc,CAC7C,CAACC,UAAD,CAD6C,EAE7CE,IAAI,IAAIA,IAAI,CAACE,WAFgC,CAAxC,C,CAKP;;AACA,OAAO,MAAMC,2BAA2B,GAAGN,cAAc,CACvD,CAACI,iBAAD,CADuD,EAEvDC,WAAW,IACTA,WAAW,GAAGE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6BC,GAAG,IAAIL,WAAW,CAACK,GAAD,CAA/C,CAAH,GAA2D,EAHjB,CAAlD,C,CAMP;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGC,kBAAkB,IAChDZ,cAAc,CACZ,CAACI,iBAAD,CADY,EAEZC,WAAW,IAAKA,WAAW,GAAGA,WAAW,CAACO,kBAAD,CAAd,GAAqC,IAFpD,CADT;AAMP,OAAO,MAAMC,0BAA0B,GAAGb,cAAc,CACtD,CAACC,UAAD,CADsD,EAEtDE,IAAI,IAAIA,IAAI,CAACW,UAFyC,CAAjD,C,CAKP;AACA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAGf,cAAc,CACrD,CAACC,UAAD,CADqD,EAErDE,IAAI,IAAI,CAAC,CAACA,IAAI,CAACE,WAFsC,CAAhD","sourcesContent":["import { createSelector } from 'reselect';\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector(\n  [selectShop],\n  shop => shop.collections\n);\n\n// we want to map the key and get the corresponded object of that key\nexport const selectCollectionsForPreview = createSelector(\n  [selectCollections],\n  collections => \n    collections ? Object.keys(collections).map(key => collections[key]) : []\n);\n\n// find collection.id matching the url params of \n// the current collection id map\n// Data Normalization by passing as objects not array\nexport const selectCollection = collectionUrlParam => \n  createSelector(\n    [selectCollections],\n    collections => (collections ? collections[collectionUrlParam] : null)\n);\n\nexport const selectIsCollectionFetching = createSelector(\n  [selectShop],\n  shop => shop.isFetching\n);\n\n// ' !!shop.collections ' means if the collections is\n// loaded will return false\n// because is not empty string {}\nexport const selectIsCollectionsLoaded = createSelector(\n  [selectShop],\n  shop => !!shop.collections\n)"]},"metadata":{},"sourceType":"module"}