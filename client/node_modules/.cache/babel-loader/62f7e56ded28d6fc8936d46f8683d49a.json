{"ast":null,"code":"import { createSelector } from 'reselect'; // return the state we made changed\n\nconst selectCart = state => state.cart; // select the property inside the state to \n// create a memorize selector\n// 2 parameters:\n// first take the array of state\n// second return the value we want after render this function\n\n\nexport const selectCartItems = createSelector([selectCart], cart => cart.cartItems);\nexport const selectCartHidden = createSelector([selectCart], cart => cart.hidden);\nexport const selectCartItemsCount = createSelector([selectCartItems], cartItems => cartItems.reduce((accumalatedQuantity, cartItem) => accumalatedQuantity + cartItem.quantity, 0)); // total in checkout\n\nexport const selectCartTotal = createSelector([selectCartItems], cartItems => cartItems.reduce((accumalatedQuantity, cartItem) => accumalatedQuantity + cartItem.quantity * cartItem.price, 0));","map":{"version":3,"sources":["/Users/andrea/Desktop/Udemy/React/crwn-clothing/client/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartHidden","hidden","selectCartItemsCount","reduce","accumalatedQuantity","cartItem","quantity","selectCartTotal","price"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC,C,CAEA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAGJ,cAAc,CAC3C,CAACC,UAAD,CAD2C,EAE3CE,IAAI,IAAIA,IAAI,CAACE,SAF8B,CAAtC;AAKP,OAAO,MAAMC,gBAAgB,GAAGN,cAAc,CAC5C,CAACC,UAAD,CAD4C,EAE5CE,IAAI,IAAIA,IAAI,CAACI,MAF+B,CAAvC;AAKP,OAAO,MAAMC,oBAAoB,GAAGR,cAAc,CAChD,CAACI,eAAD,CADgD,EAEhDC,SAAS,IACPA,SAAS,CAACI,MAAV,CACE,CAACC,mBAAD,EAAsBC,QAAtB,KACAD,mBAAmB,GAAGC,QAAQ,CAACC,QAFjC,EAGE,CAHF,CAH8C,CAA3C,C,CAUP;;AACA,OAAO,MAAMC,eAAe,GAAGb,cAAc,CAC3C,CAACI,eAAD,CAD2C,EAE3CC,SAAS,IACPA,SAAS,CAACI,MAAV,CACE,CAACC,mBAAD,EAAsBC,QAAtB,KACAD,mBAAmB,GAAGC,QAAQ,CAACC,QAAT,GAAoBD,QAAQ,CAACG,KAFrD,EAGE,CAHF,CAHyC,CAAtC","sourcesContent":["import { createSelector } from 'reselect';\n\n// return the state we made changed\nconst selectCart = state => state.cart;\n\n// select the property inside the state to \n// create a memorize selector\n// 2 parameters:\n// first take the array of state\n// second return the value we want after render this function\nexport const selectCartItems = createSelector(\n  [selectCart],\n  cart => cart.cartItems\n);\n\nexport const selectCartHidden = createSelector(\n  [selectCart],\n  cart => cart.hidden\n);\n\nexport const selectCartItemsCount = createSelector(\n  [selectCartItems],\n  cartItems => \n    cartItems.reduce(\n      (accumalatedQuantity, cartItem) => \n      accumalatedQuantity + cartItem.quantity, \n      0\n    )\n);\n\n// total in checkout\nexport const selectCartTotal = createSelector(\n  [selectCartItems],\n  cartItems => \n    cartItems.reduce(\n      (accumalatedQuantity, cartItem) => \n      accumalatedQuantity + cartItem.quantity * cartItem.price, \n      0\n    )\n);"]},"metadata":{},"sourceType":"module"}